###################################################################################
#
#  Naming conventions used in source files and header files. 
#
#  Let's assume the following text content to be unshredded by this programme.
#  
#  a1|a2|a3
#  b1|b2|b3
#  c1|c2|c3
#  d1|d2|d3
# 
#  In above example,, a1, a2, b1, etc. is a string with same width, "|" is the delimiter
#  used by programme.
#
#  In the programme, above data will be stored into following 2 dimentional vector:
#  {
#    {a1,b1,c1,d1},
#    {a2,b2,c2,d2},
#    {a3,b3,c3,d3}
#  }
#  
#  A text strip refers to {a1,b1,c1,d1}, or {a2,b2,c2,d2}, etc. 
#  A "column" is often used to refer a text strip in data members or variables in the programme. 
#  
###################################################################################


########### Common Classes Start ############
TextFileOperation
---------------------------------------
+ static ReadText(const string str_filename, vector<std::string> &vec_str_text_lines) : void
# Newly-added, used to read dictionary into set 
+ static ReadText(const string str_filename, unordered_set<string> &uset_str_text_lines) : void
+ static WriteText(const string str_filename, const vector<std::string> vec_str_text_lines) : void
---------------------------------------

TextStripOperation
---------------------------------------
- static const int s_random_number_
---------------------------------------
+ static Disorder(vector<vector<string>>& vec_str_input) : void
+ static Transpose(vector<vector<string>>& vec_str_input, vector<vector<string>>& vec_str_input_trans) : void
# Newly-added to support unshredder
+ static MergeText(vector<vector<string>> & vec_str_input, vector<string>& vec_str_text): void
---------------------------------------

# Containing common functions to handle words or a string with words
WordStringOperation
---------------------------------------
+ static RemoveWordSuffix(string &str_lookup_key): bool
+ static FindLookupWordLeft(string & str_line, string & str_key, int n_column_width): void
+ static FindLookupWordRight(string & str_line, string & str_key, int n_column_width): void
---------------------------------------

# Hungry Singleton to provide dictionary for lookup by multiple threads
SingletonDiction
---------------------------------------
- unordered_set<string> uset_dictionary_
---------------------------------------
+ static GetInstance() : SingletonDiction &
+ Init() : void
+ BuildWordPiece() : void
+ LookupDict(string str_letters) : bool
---------------------------------------
########### Common Classes End ############

########### Regular Classes Start ############
# Global data types used by multiple classes
typedef struct {
	float f_match_rate;
	float f_notmatch_rate;
} MatchRate;


typedef enum 
{
    LEFT = 0,
    RIGHT,
    LIMIT=2
} TwoWayDirections;

# Global const used by programme
const float kToleranceRate = 0.25;
const kAcceptableMatchRate = 1;

ColumnMatchManager
---------------------------------------
- vector<vector<string>> vec_text_columns_
- vector<string> vec_new_column_
# Store match rate from LEFT side and RIGHT side
+ MatchRate column_match_rate_[LIMIT];
---------------------------------------
+ ColumnMatchManager (vector<vector<string>> vec_text_columns,vector<string> vec_new_column)
# Populate column_match_rate_[];
+ CalculateMatchRate (): void 
# Called by CalculateMatchRate
- BuildLookupKey(vector<string> &vec_key_column, TwoWayDirections enum_direct): void
---------------------------------------

ColumnSelectManager
---------------------------------------
- typedef struct {
   int n_number_in_pool;
   TwoWayDirections enum_best_match_direct;
  } BestMatchColumn;
+ BestMatchColumn best_match_column_;
# Containing one or more columns which have been ordered
+ vector<vector<string>> vec_selected_columns_;
# Containing all rest columns to be ordered
+ vector<vector<string>> vec_column_pool_;
# b_failure_flag_ default is false, true means no matching column can be found in vec_column_pool_.
+ bool b_failure_flag_;
---------------------------------------
# Set best_match_column_.n_number_in_pool = -1
# Set best_match_column_.enum_best_match_direct = LEFT
# Set b_failure_flag_ = false
+ ColumnSelectManager();
# Init vec_selected_columns_ and vec_column_pool_ with columns
+ Init(const vector<vector<string>> & vec_text_columns) : void
# Find the best matching and then upate vec_selected_columns_ and vec_column_pool_
+ RebuildColumnsByBestMatch() : void
# Called only by RebuildColumnsByBestMatch 
# Find best match in vec_column_pool_, if found, populate best_match_column_ , if fail, set
# b_failure_flag_ true
- FindBestMatch() : void
# Add the best matching column to vec_selected_columns_
+ AddToSelectedColumns() : void
# Remove the best matching column from vec_column_pool_,
# then re-set best_match_column_ with default value
+ DeleteFromColumnPool() : void
---------------------------------------

# To construct text strips to a text page
TextUnshredder
---------------------------------------
# Store text data read from GetInput()
+ vector<vector<string>> vec_text_columns_
# Store final result
+ vector<string> vec_merged_text_
+ bool b_premature_flag_
# Size of unselected columns when premature happens
+ int n_premature_column_count_
- ColumnSelectManager column_select_manager_
---------------------------------------
# b_premature_flag_ = false, n_premature_column_count_ = 0
+ TextUnshredder()
# Populate vec_text_columns_ from input file, with calling text_strip::transpose
+ GetInput(const string str_in_file) : void
# Main operations to process unshredding
+ DoTextUnshredder() : void
# Generate final output file, in multi-threads mode, this function usually won't be used.
+ CreateOutput(const string str_out_file) : void
---------------------------------------
########### Regular Classes End ###############

########### ThreadController Class Start ###############
typedef enum 
{
    NOTSTART = 0,
    PARTICIAL = 1,
    SUCCESS = 2
} ThreadStatus;


ThreadController
---------------------------------------
# mutex for all threads
- static mutex status_mutex_;
- static mutex data_mutex_;
# Store final result
+ static vector<string> vec_final_merged_text_
# default b_premature_flag_ = false
+ static bool b_premature_flag_
# Size of unselected columns when premature happens, default n_premature_column_count_ = 0
+ static int n_premature_column_count_
# Default thread_status_ = NOTSTART
- static ThreadStatus thread_status_
# Default is 0, the number will be increased if any exception throw from a thread
+ static int n_thread_abnormals_
---------------------------------------
# Entry function for threads
+ static DoTextUnshredderInThread(TextUnshredder text_unshred) : int
# Called by DoTextUnshredderInThread
- static UpdateThreadStatus(ThreadStatus status) : void
# Called by DoTextUnshredderInThread
- static RecordThreadResult(vector<string> vec_final_merged_text, int n_premature_column_count,bool b_premature_flag) : void
# Called by DoTextUnshredderInThread
- static RecordThreadAbnormals() : void
---------------------------------------
########### ThreadController Class End #################

Class relationship:
==================

                             TextStripOperation 
                                     ^
                                     :
                                     :(dependency)
                                     :
                                     :
                 (dependency)        :       (dependency) 
ThreadController ------------>TextUnshredder ------------> TextFileOperation
                                     |
                                     | 
                                     |(association)
                                     |
                                     |
                                     V            (dependency)
                              ColumnSelectManage ------------> TextStripOperation (depending on SingletonRandom)
                                     :
                                     :
                                     :(dependency)
                                     :
                                     :
                                     V           (dependency)
                              ColumnMatchManager ------------> WordStringOperation
                                     : 
                                     :
                                     : (dependency)
                                     :
                                     V
                              SingletonDiction



Main algorithm to reconstruct the disordered text columns (aka text strips):
==================================================================
In the following context, those columns which have been successfully re-constructed will be called as SELECTED COLUMNS, while the remaining columns will be called as COLUMN POOL.  
1. Randomly select a column, and create initial SELECTED COLUMNS with this only one column. All the rest columns will be put into COLUMN POOL.  

2. For each column in COLUMN POOL, calcuate the following matching rate to the SELECTED COLUMNS from LEFT and RIGHT direction, respectively.
  - f_match_rate = (Found + 1)/(NotFound + 1),
  - f_notmatch_rate = NotFound/AllRow,

  In above formulas:
    Found stands for the number of the strings (i.e. partial words or word-piece) which can be found in dictionry after appended to SELECTED COLUMNS.  The higher of this value, the higher the maching rate.
    NotFound stands for the number of the the strings (i.e. partial words or word-piece) which cannot be found in dictionry after appended to SELECTED COLUMNS. The higher of this value, the lower the matching rate.
    AllRow stands for the total number of rows.

    f_match_rate stands for the overall matching rate. The higher of this value, the higher the overall matching rate.
    f_notmatch_rate is used to meansure the level of not matching. The higher of this value, the lower matching level.

    When caculating Found or NotFound, non-alphabetic strings or the strings with their lengths less than 2 charactors will be ignored for dictionary lookup.  
    Taking a set of columns containing 10 rows as example (i.e. AllRow = 10), the value range of f_match_rate will be 0.09 ~ 11 (i.e. 1/11 ~ 11).

    f_notmatch_rate should always ranges from 0 ~ 100% (i.e. 0 ~ 1)

    If f_match_rate is greater than pre-defined value of kAcceptableMatchRate in the programme, it will be treated as valid. Otherise, just ingore it in the further processing. 
    
    If f_notmatch_rate is greater than pre-defined value of kToleranceRate in the programme, it will be treated as valid. Otherise, just ingore it in the further processing.

3. Go through all columns in COLUMN POOL to calcuate their matching rates and identify the best matching based on that. 
Add the best matched one into SELECTED COLUMNS, and then remove it from COLUMN POOL.
The stragery to identify the best matching is:
  - those columns won't be considered as candiates if their f_notmatch_rate greater than kToleranceRate. 
  - those columns won't be considered as candiates if their f_match_rate less than or equal to kAcceptableMatchRate. 
  - All the rest columns will be considered as the candiates, and pick the one with largest f_match_rate as the best matching one.
  - If no such column exists (which means no column is left after discarding those with their f_notmatch_rate > kToleranceRate and f_match_rate <= kAcceptableMatchRate),
the processing will be marked as pre-matured and will complete with the partial result being provided.

4. Repeat step 2 - step 3 in above.
  - When there is no column left in COLUMN POOL, the processing completes successuflly. 

5. Simulating test shows whether the processing would run into pre-mature state is sensative to the initial SELECTED COLUMNS (i.e the first selected column). 
Under the same condition to test text strips having 8 rows, with choosing differenct initial SELECTED COLUMNS, ~80% cases may lead to pre-matured situation, while ~20% cases may lead to successful result.
This could be explained by considering that some columns (especially containing many blank lines) are easy to be matched by multiple columns, which should have more chance to lead to the pre-majure in later processing than some other columns.
With this fact, it has been decided to choose multi-threads (10 threads by default) to enhance the programme and choose the best one as the final result to mitigate the impact by potential pre-mature.

**Note**:  
Avove algorithm is kind of simulating people's mind to re-construct text strips, however, sometimes it is really hard or almost impossible to make a successful 100% restoration, really depending on the text strip content. 
But another fact is that more rows text strips have, the higher successful completion rate the programme may achieve.
The rationale behind above might lie in the fact that more rows usually mean more characteristics for a column to use when compared with others.
Based on a variety of testings, we could expect that the regular text content (i.e. from books, newspaper, magazines, etc.) with above 15 rows can perfectly restored by this programme. 

Another test which has also been done for the programme is, repeating acceptance test (i.e. including 30 cases) for 10 times (i.e. 300 tests in total), 
the number of pre-majured cases should always be less than 1% (i.e. occasionally, we may see 1 or 2 pre-matured cases when executing 300 cases, which is acceptable by considering the random nature of the algorithm).
