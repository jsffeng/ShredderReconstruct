#include <thread>
#include <iostream>
#include "singleton_diction.h"
#include "text_unshredder.h"

using namespace std;


void thread_func(string name)
{
  TextUnshredder text_unshredder("shredded_text.ascii", name);
  // Populate Populate vec_text_columns_ from input file
  text_unshredder.GetInput();
  // Shred text lines stored vec_str_source_data_ and save shredded result into vec_str_shredded_text_
  text_unshredder.DoTextUnshredder();

  text_unshredder.CreateOutput();
}


#ifndef UTFLAG
// Main function
int main()
#else
int UTmain(const string str_infile, const string str_outfile)
#endif
{
  try 
  {
#ifndef UTFLAG
/*
    TextUnshredder text_unshredder[4] = {TextUnshredder("shredded_text.ascii", "restored_text.ascii0"),TextUnshredder("shredded_text.ascii", "restored_text.ascii1"),TextUnshredder("shredded_text.ascii", "restored_text.ascii2"), TextUnshredder("shredded_text.ascii", "restored_text.ascii3")};
*/
#else
    TextUnshredder text_unshredder(str_infile, str_outfile);
#endif

    thread unshred_thread[4]; 

    // Singleton class 
    SingletonDiction & singleton_dict = SingletonDiction::GetInstance();
    singleton_dict.Init();
    singleton_dict.BuildWordPiece();

    string file[4] = {"0.ascii", "1.ascii", "2.ascii","3.ascii"};

    for (int i = 0; i < 4; ++i)
    {
        unshred_thread[i] = thread(thread_func,file[i]);
    }
   
    for (int i = 0; i < 4; ++i)
      unshred_thread[i].join(); 

/*
    //text_unshredder.DoTextUnshredder();
    int n_number; 
    int n_remain_columns = text_unshredder[0].n_premature_column_count_ 
    int n_flag = 0;
    for (int i = 0; i < 4; ++i)
    {
      if (text_unshredder[i].b_premature_flag_ = false )
      {   
        text_unshredder[i].CreateOutput();
        cout <<"Successfully restored!" << endl;
        ++n_flag;
        break;
      }

      if (text_unshredder[i].n_premature_column_count_ < n_remain_columns) 
      {  
        n_remain_columns = text_unshredder[i].n_premature_column_count_
        n_number = i;
      }
    }
    if (0 == n_flag)
    {
      text_unshredder[n_number].CreateOutput(); 
      cout <<"Partially restored! Number of "<< text_unshredder[n_number].n_premature_column_count_ << " text strips cannot be restored successfully and just append to the right side!" << endl;
    }

*/
  /* 
    // Print vec_merged_text_ to output file
    text_unshredder1.CreateOutput();

    if (text_unshredder.b_premature_flag_ == true) 
    {
      cout <<"Partially restored! Number of "<< text_unshredder.n_premature_column_count_ << " text strips cannot be restored successfully and just append to the right side!" << endl;

      return 1;
    }
    else
    {
      cout <<"Successfully restored!" << endl;

      return 0;
    }
 */ 
  }

  catch(std::exception & ref_exception)
  {
#ifndef UTFLAG
    cout << ref_exception.what() << endl;
    cout << "Error occured. Abort!" << endl; 
#endif
    return 2;
  }
}
