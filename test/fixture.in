#include<fstream>

// Fixtures Start
struct Fixture_input
{
  
  vector<vector<string>> Fix_input;
  vector<vector<string>> Fix_input_r;
  vector<string> Fix_input_merged;
  vector<string> Fix_input_r_merged;

  Fixture_input() 
  {

    // One column is like {"ab","c:","ef","gh"}
    vector<vector<string>> myinput = {{"ab","c:","ef","gh"}, \
                                      {"i,","kl","m ","op"}, \
                                      {"qr","st","?v","wx"}};

    vector<vector<string>> myinput_r = {{"ab", "i,", "qr"},  \
                                        {"c:","kl", "st" },  \
                                        {"ef", "m ", "?v"},  \
                                        {"gh", "op", "wx"}};


    vector<string> myinput_merged = {"abi,qr",  \
                                        "c:klst",  \
                                        "efm ?v",  \
                                        "ghopwx"};
    
    vector<string> myinput_r_merged = {"abc:efgh", \
                                      "i,klm op", \
                                      "qrst?vwx"};

    Fix_input.assign(myinput.begin(), myinput.end());
    Fix_input_r.assign(myinput_r.begin(), myinput_r.end());
    Fix_input_merged.assign(myinput_merged.begin(), myinput_merged.end());
    Fix_input_r_merged.assign(myinput_r_merged.begin(), myinput_r_merged.end());
  }
  
  ~Fixture_input(){}
};

struct file_gen
{
  static void  create_file(const string file_nm, const vector<string> text_lines)
  {
    ofstream file;
  
    file.open (file_nm);
    if(!file)
    {
      throw runtime_error("file cannot open!");
    }
 
    if (text_lines.size() != 0) 
    {
      auto iter=text_lines.begin();
      while (iter != text_lines.end())
      {
  
        file << *iter <<endl;
        ++iter;
      }
    }
    file.close();
  }

  static void  create_file(const string file_nm, const set<string> text_lines)
  {
    ofstream file;
  
    file.open (file_nm);
    if(!file)
    {
      throw runtime_error("file cannot open!");
    }
 
    if (text_lines.size() != 0) 
    {
      auto iter=text_lines.begin();
      while (iter != text_lines.end())
      {
  
        file << *iter <<endl;
        ++iter;
      }
    }
    file.close();
  }

};

struct Fixture_file_vec
{
  vector<string> Fix_orig_lines;
  vector<string> Fix_lines;

  Fixture_file_vec() 
  {
    Fix_orig_lines.push_back("This is a good start.");
    Fix_orig_lines.push_back("Tomorrow will be better");
    Fix_orig_lines.push_back("because it will be successful...");

    Fix_lines.push_back("This is a good start.           ");
    Fix_lines.push_back("Tomorrow will be better         ");
    Fix_lines.push_back("because it will be successful...");

    file_gen::create_file("test_input.ascii",Fix_orig_lines);
    file_gen::create_file("test_input1.ascii",Fix_lines);
   
    vector<string> empty_lines;
    file_gen::create_file("test_input00.ascii",empty_lines);

    file_gen::create_file("test_output.ascii",Fix_orig_lines);
    file_gen::create_file("test_output1.ascii",Fix_lines);
  }
 
  ~Fixture_file_vec()
  {
    try 
    {
      remove("test_input.ascii");
      remove("test_input1.ascii");
      remove("test_input00.ascii");
      remove("test_output.ascii");
      remove("test_output1.ascii");
    }

    catch(...) {}
  }

};

struct Fixture_file_set
{
  set<string> Fix_lines;

  Fixture_file_set() 
  {

    Fix_lines.emplace("This");
    Fix_lines.emplace("good");
    Fix_lines.emplace("test ");
    Fix_lines.emplace(" 13hht");
    // Contain tab
    Fix_lines.emplace(" 13hht	");

    file_gen::create_file("test_input.ascii",Fix_lines);
   
    set<string> empty_lines;
    file_gen::create_file("test_input00.ascii",empty_lines);

//    file_gen::create_file("test_output.ascii",Fix_lines);
  }
 
  ~Fixture_file_set()
  {
    try 
    {
      remove("test_input.ascii");
      remove("test_input00.ascii");
 //     remove("test_output.ascii");
    }

    catch(...) {}
  }

};


struct Fixture_source_data
{
  vector<string> Fix_lines;
  vector<vector<string>> Fix_shredded_text_wid2;
  vector<vector<string>> Fix_shredded_text_wid3;


  Fixture_source_data() 
  {
    Fix_lines.push_back("This is a good start   ");
    Fix_lines.push_back("Tomorrow will be bett  ");
    Fix_lines.push_back("because it will be succ");

    vector<vector<string>> myshredded_wid2 = {{"Th","is"," i","s ","a ","go","od"," s","ta","rt","  ","  "}, \
                                          {"To","mo","rr","ow"," w","il","l ","be"," b","et","t ","  "}, \
                                          {"be","ca","us","e ","it"," w","il","l ","be"," s","uc","c "}};


    vector<vector<string>> myshredded_wid3 = {{"Thi","s i","s a"," go","od ","sta","rt ","   "}, \
                                          {"Tom","orr","ow ","wil","l b","e b","ett","   "}, \
                                          {"bec","aus","e i","t w","ill"," be"," su","cc "}};

    Fix_shredded_text_wid2.assign(myshredded_wid2.begin(), myshredded_wid2.end());
    Fix_shredded_text_wid3.assign(myshredded_wid3.begin(), myshredded_wid3.end());

  }

  ~Fixture_source_data() {}
};

struct Fixture_data_file :  Fixture_source_data
{
  vector<string> format_lines_wid2;
  vector<string> format_lines_wid3;

  Fixture_data_file()
  {
    format_lines_wid2.push_back("|Th|is| i|s |a |go|od| s|ta|rt|  |  |");
    format_lines_wid2.push_back("|To|mo|rr|ow| w|il|l |be| b|et|t |  |");
    format_lines_wid2.push_back("|be|ca|us|e |it| w|il|l |be| s|uc|c |");

    format_lines_wid3.push_back("|Thi|s i|s a| go|od |sta|rt |   |");
    format_lines_wid3.push_back("|Tom|orr|ow |wil|l b|e b|ett|   |");
    format_lines_wid3.push_back("|bec|aus|e i|t w|ill| be| su|cc |");

    file_gen::create_file("test_output2.ascii",format_lines_wid2);
    file_gen::create_file("test_output3.ascii",format_lines_wid3);

  }

  ~Fixture_data_file()
  { 
    try
    {
      remove("test_output2.ascii");
      remove("test_output3.ascii");
    }
   
    catch(...) {}
  }
};

struct Fixture_columns :  Fixture_source_data
{

// For strip width is 2
// Columns: 0  1  2  3  4  5  6  7  8  9  10 11
//         |Th|is| i|s |a |go|od| s|ta|rt|  |  |
//         |To|mo|rr|ow| w|il|l |be| b|et|t |  |
//         |be|ca|us|e |it| w|il|l |be| s|uc|c |

  vector<vector<string>> Fix_columns_wid2;  // Column 2 - 5
  vector<string> Fix_columnX_wid2;  // Column 6
  vector<string> Fix_columnY_wid2;  // Column 1
  vector<string> Fix_columnZ_wid2;  // Column 7

// For strip width is 3
// Columns: 0   1   2   3   4   5   6   7
//         |Thi|s i|s a| go|od |sta|rt |   |
//         |Tom|orr|ow |wil|l b|e b|ett|   |
//         |bec|aus|e i|t w|ill| be| su|cc |

  vector<vector<string>> Fix_columns_wid3; // Column 2 - 5
  vector<string> Fix_columnX_wid3; // Column 6
  vector<string> Fix_columnY_wid3; // Column 1
  vector<string> Fix_columnZ_wid3; // Column 7

  Fixture_columns()
  {
    vector<vector<string>> vec_str_temp;
    // For strip width is 2
    TextStripOperation::Transpose(Fix_shredded_text_wid2, vec_str_temp);
   
    auto iter_start = vec_str_temp.begin() + 2; 
    auto iter_end = vec_str_temp.begin() + 6; 
    Fix_columns_wid2.assign(iter_start, iter_end); 
  
    Fix_columnX_wid2.assign(iter_end->begin(),iter_end->end()); 
  
    --iter_start;
    Fix_columnY_wid2.assign(iter_start->begin(),iter_start->end()); 
  
    ++iter_end;
    Fix_columnZ_wid2.assign(iter_end->begin(),iter_end->end()); 

    // For strip width is 3

    vec_str_temp.clear();
    TextStripOperation::Transpose(Fix_shredded_text_wid3, vec_str_temp);
   
    auto iter1_start = vec_str_temp.begin() + 2; 
    auto iter1_end = vec_str_temp.begin() + 6; 
    Fix_columns_wid3.assign(iter1_start, iter1_end); 
  
    Fix_columnX_wid3.assign(iter1_end->begin(),iter1_end->end()); 
  
    --iter1_start;
    Fix_columnY_wid3.assign(iter1_start->begin(),iter1_start->end()); 
  
    ++iter1_end;
    Fix_columnZ_wid3.assign(iter1_end->begin(),iter1_end->end()); 
  }
  
  ~Fixture_columns() {}

};

// Fixtures End
