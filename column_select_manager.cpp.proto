//#include "common_classes.h"
#include "column_match_manager.h"
#include "column_select_manager.h"

using namespace std;

const float kToleranceRate = 0.15;

// Class ColumnSelectManager constructor
ColumnSelectManager::ColumnSelectManager()
{
}

// Class ColumnSelectManager
// Init vec_selected_columns_ and vec_column_pool_ with columns. 
void ColumnSelectManager::Init(vector<vector<string>> columns)
{
}

// Class ColumnSelectManager
void ColumnSelectManager::FindBestMatch()
{
   MatchRate match_rate_t;
   TwoWayDirections enum_direct_t;

   int n_number = -1;
   float f_best_match = 0;

   int i = 0;
   auto iter = vec_column_pool_.begin();
   while (iter != vec_column_pool_.end() )
   {
       ColumnMatchManager p_column_match_manager = new ColumnMatchManager(vec_selected_columns_, *iter); 
       
       p_column_match_manager->CalculateMatchRate();
       for(TwoWayDirections j=LEFT ;j<LIMIT; j=(TwoWayDirections)(j+1))
       {
          match_rate_t = p_column_match_manager->column_match_rate_[j];
         if (match_rate_t.f_notmatch_rate > kToleranceRate)
         {
 	       continue;
         }
 	   else
         {
            if (match_rate_t.f_match_rate > f_best_match)
            {
 	         f_best_match = match_rate_t.f_match_rate;
 	         n_number = i;
                 enum_direct_t = j;
            }
         }
       }

       delete p_column_match_manager;
       ++iter;
       ++i;
   }

   if (n_number == -1)
   {
      //Failed to find any matching columns! May need to change parameter and re-try.
      b_failure_flag_ = true;
   }
   else
   { 
     best_match_column_.n_number_in_pool = n_number; 
     best_match_column_.enum_best_match_direct = enum_direct_t;
   }
}

// Class ColumnSelectManager
void ColumnSelectManager::AddToSelectedColumns()
{     
  if (best_match_column_.n_number_in_pool == -1) 
    throw runtime_error("Invalid input!");

   vector<string> vec_column = vec_column_pool_[vec_column_pool_.n_number_in_pool];

  // Reset the following is -1 after adding it to vec_selected_columns_
  best_match_column_.n_number_in_pool == -1;
}


// Class ColumnSelectManager
void ColumnSelectManager::DeleteFromColumnPool()
{
}

// Class ColumnSelectManager
int ColumnSelectManager::RebuildColumnsByBestMatch()
{
  int n_column_pool_number_t;
  TwoWayDirections enum_direct_t;

  FindBestMatch(n_column_pool_number_t, enum_direct_t);

  if (b_failure_flag_ == true ) 
     return 1; 
  //reconstruct  vec_selected_columns_ with num and enum_direct;
  AddToSelectedColumns();

  //reconstruct vec_column_pool_ with num and enum_direct;
  DeleteFromColumnPool();
  
  return 0;
}

