########### Common Classes Start ############
TextFileOperation
---------------------------------------
+ static ReadText(const string str_filename, vector<std::string> &vec_str_text_lines) : void
# Newly-added, used to read dictionary into set
+ static ReadText(const string str_filename, set<string> &uset_str_text_lines) : void
+ static WriteText(const string str_filename, const vector<std::string> vec_str_text_lines) : void
---------------------------------------

TextStripOperation
---------------------------------------
- static const int s_random_number_
---------------------------------------
+ static Disorder(vector<vector<string>>& vec_str_input) : void
+ static Transpose(vector<vector<string>>& vec_str_input, vector<vector<string>>& vec_str_input_trans) : void
# Newly-added to support unshredder
+ static MergeText(vector<vector<string>> & vec_str_input, vector<string>& vec_str_text): void
---------------------------------------

StringWordOperation
---------------------------------------
+ static RemoveWordSuffix(string &str_lookup_key): bool
+ static FindLookupWordLeft(string & str_line, string & str_key, int n_column_width): void
+ static FindLookupWordRight(string & str_line, string & str_key, int n_column_width): void
---------------------------------------

SingletonDiction
---------------------------------------
- set<string> uset_dictionary_
---------------------------------------
+ static GetInstance() : SingletonDiction &
+ Init() : void
+ BuildWordPiece() : void
+ LookupDict(string str_letters) : bool
---------------------------------------
########### Common Classes End ############

########### Regular Classes Start ############
# Global data types used by multiple classes
typedef struct {
	float f_match_rate;
	float f_notmatch_rate;
} MatchRate;


typedef enum 
{
    LEFT = 0,
    RIGHT,
    LIMIT=2
} TwoWayDirections;

# Global const used by programme
const float kToleranceRate = 0.25;
const kAcceptableMatchRate = 1;

ColumnMatchManager
---------------------------------------
- vector<vector<string>> vec_text_columns_
- vector<string> vec_new_column_
# LEFT and RIGHT
+ MatchRate column_match_rate_[LIMIT];
---------------------------------------
+ ColumnMatchManager (vector<vector<string>> vec_text_columns,vector<string> vec_new_column)
# Populate column_match_rate_[];
+ CalculateMatchRate (): void 
# Called by CalculateMatchRate
- BuildLookupKey(vector<string> &vec_key_column, TwoWayDirections enum_direct): void
---------------------------------------

ColumnSelectManager
---------------------------------------
- typedef struct {
   int n_number_in_pool;
   TwoWayDirections enum_best_match_direct;
  } BestMatchColumn;
+ BestMatchColumn best_match_column_;
+ vector<vector<string>> vec_selected_columns_;
+ vector<vector<string>> vec_column_pool_;
# b_failure_flag_ default is false, true means no matching can be found in vec_column_pool_.
+ bool b_failure_flag_;
---------------------------------------
# Setup best_match_column_.n_number_in_pool=-1,best_match_column_.enum_best_match_direct=LEFT
# Setup b_failure_flag_ = false
+ ColumnSelectManager();
+ Init(const vector<vector<string>> & vec_text_columns) : void
# Find the best matching column and move it from vec_column_pool_ to vec_selected_columns_
+ RebuildColumnsByBestMatch() : void
+ AddToSelectedColumns() : void
# Called only by RebuildColumnsByBestMatch 
# Find best match in vec_column_pool_, if found, populate best_match_column_ , if fail, set
# b_failure_flag_ true
- FindBestMatch() : void
- DeleteFromColumnPool() : void
---------------------------------------

# To construct text strips to a text page
TextUnshredder
---------------------------------------
# Store text data read from GetInput()
+ vector<vector<string>> vec_text_columns_
# Store final result
+ vector<string> vec_merged_text_
+ bool b_premature_flag_
# Size of unselected columns
+ int n_premature_column_count_
- ColumnSelectManager column_select_manager_
---------------------------------------
# b_premature_flag_ = false, n_premature_column_count_ = 0
+ TextUnshredder()
# Populate vec_text_columns_ from input file, with calling text_strip::transpose
+ GetInput(const string str_in_file) : void
+ DoTextUnshredder() : void
# Generate final output file
+ CreateOutput(const string str_out_file) : void
---------------------------------------
########### Regular Classes End ###############

typedef enum 
{
    NOTSTART = 0,
    PARTICIAL = 1,
    SUCCESS = 2
} ThreadStatus;

########### ThreadController Class Start ###############
ThreadController
---------------------------------------
# mutex for all threads
- static mutex status_mutex_;
- static mutex data_mutex_;
# Store final result, default contain blank strings
+ static vector<string> vec_final_merged_text_
# default b_premature_flag_ = false
+ static bool b_premature_flag_
# Size of unselected columns, default n_premature_column_count_ = 0
+ static int n_premature_column_count_
# default thread_status_ = NOTSTART
- static ThreadStatus thread_status_
# Increase the number any exception throw from a thread
+ static int n_thread_abnormals_
---------------------------------------
+ static DoTextUnshredderInThread(TextUnshredder text_unshred) : int
- static UpdateThreadStatus(ThreadStatus status) : void
- static RecordThreadResult(vector<string> vec_final_merged_text, int n_premature_column_count,bool b_premature_flag) : void
- static RecordThreadAbnormals() : void
---------------------------------------
########### ThreadController Class End #################

Class relationship (excluding ThreadController):
==================

TextStripOperation 
    ^	
    : 
    :
    :
    : (dependency)
    :
TextUnshredder ------------> TextFileOperation (dependency)
    |	
    | (association)	
    |	
    |
    |	
    V
ColumnSelectManager-----------> ColumnMatchManager (dependency) --------> StringWordOperation (dependency)
                           	    : 
				    :
				    : (dependency)
				    :
				    V
				SingletonDiction


Main algorithm:
==============
1. Randomly select a column (i.e. selected column or columns), in the remaining columns, calcuate the matching rate with the following data from LEFT and then RIGHT.
  - f_match_rate = (Found + 1)/(NotFound + 1),
  - f_notmatch_rate = NotFound/AllRow,
    Found is the number of the strings (or saying partial words) can be found in dictionry after appended to the selected column.  The higher of this value, the higher the maching rate.
    NotFound is the number of the the strings (or saying partial words) cannot be found in dictionry after appended to the selected column. The lower of this value, the higher the matching rate.
    AllRow is the number of rows.

    f_match_rate is the overall matching rate.

    When caculating Found or NotFound, non-alphabetic string or the string with length less than 2 will be ingored for dictionary lookup.  
    Suppose a column contain 10 rows (i.e. AllRow = 10), the value range of f_match_rate will be 0.09 ~ 11 (i.e. 1/11 ~ 11).

    If f_match_rate is above pre-defined value kAcceptableMatchRate, will be treated as valid. Otherise, just ingore the further processing. 
    
    f_notmatch_rate ranges from 0 ~ 100% (i.e. 0 ~ 1)
    f_notmatch_rate is above pre-defined value kToleranceRate=25%, will be treated as valid. Otherise, just ingore the further processing.

2. Compared matching rate, and find the best matching and add into selected columns by the following stragery.
  - If f_notmatch_rate > kToleranceRate, just discard.
  - In all rest columns with f_match_rate > kAcceptableMatchRate,  pick the one with largest f_match_rate value.

3. Repeat above step.
   - If all the remaining columns got processed, completes successuflly, otherwise,
   - Mark pre-matured if no remaining columns satisfy (f_notmatch_rate > kToleranceRate and f_match_rate > kAcceptableMatchRate). In this situation, the partial selected columns will be provided.

4. Testing shows the result is sensative to the first selected column. With choosing differenct first selected under the same condition , in ~85% cases, it may lead to pre-matured situation, and in ~15% cases, it can lead to successful result. With this, decided to choose multi-thread to enhance the programme and choose the best one as the final result. 

