#include "common_classes.h"
//#include "column_match_manager.h"
#include "text_unshredder.h"

// Class TextUnshredder constructor
TextUnshredder::TextUnshredder(const string str_in_file, const string str_out_file)
{
}

// Class TextUnshredder
void TextUnshredder::GetInput()
{
}

// Class TextUnshredder
void TextUnshredder::CreateOutput()
{
}

// Class TextUnshredder
void TextUnshredder::DoTextUnshredder()
{

 column_select_manager_.Init(vec_text_columns_);
 while (column_select_manager_.vec_column_pool_ ! = NULL && column_select_manager_.b_failure_flag_ == false)
 { 
   column_select_manager_.RebuildColumnsByBestMatch();
 }

// vector<string> vec_merged_text_trans;
 if (column_select_manager_.b_failure_flag_ == true) 
 {
  // b_premature_flag_ = true, n_premature_column_number_ = size of column_select_manager_.vec_column_pool_
  // combine column_select_manager_.vec_selected_columns_ and column_select_manager_.vec_column_pool_ 
     column_select_manager_.best_match_column_.enum_best_match_direct = RIGHT;
     for (int i=0; i< sizeof(column_select_manager_.vec_column_pool_); i++) 
     {
       column_select_manager_.best_match_column_.n_number_in_pool = i; 
       column_select_manager_.AddToSelectedColumns();
     }
 }

 TextStripOperation::MergeText(column_select_manager_.vec_selected_columns_,vec_merged_text_);
 //TextStripOperation::Transpose(vec_merged_text_trans, vec_merged_text_);

}

